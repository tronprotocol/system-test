plugins {
    id "org.sonarqube" version "2.6"
}

apply plugin: 'application'
apply plugin: 'checkstyle'

mainClassName = 'org.tron.program.FullNode'

def versions = [
        checkstyle: '8.7',
]

jacoco {
    toolVersion = "0.8.1"
}


configurations {
    checkstyleConfig

}

configurations.getByName('checkstyleConfig') {
    transitive = false
}

ext {
    leveldbGroup = "org.fusesource.leveldbjni"
    leveldbName = "leveldbjni-all"
    leveldbVersion = "1.8"
}

dependencies {
    //local libraries
    compile fileTree(dir: 'libs', include: '*.jar')
    // end local libraries
    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile group: 'org.mockito', name: 'mockito-core', version: '2.13.0'
    testCompile group: 'org.hamcrest', name: 'hamcrest-junit', version: '1.0.0.1'

    testCompile group: 'org.testng', name: 'testng', version: '6.14.3'

    compile group: 'org.bouncycastle', name: 'bcprov-jdk18on', version: '1.78.1'

    compile group: 'com.typesafe', name: 'config', version: '1.3.2'

    compile "com.cedarsoftware:java-util:1.11.0"

    compile group: 'com.beust', name: 'jcommander', version: '1.82'

    compile group: 'junit', name: 'junit', version: '4.13.2'

    compile group: 'net.jcip', name: 'jcip-annotations', version: '1.0'

    compile group: 'com.google.inject', name: 'guice', version: '4.1.0'

    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.12.7.1'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.8.6'

    compile group: 'io.dropwizard.metrics', name: 'metrics-core', version: '3.1.2'
    compile group: 'com.github.davidb', name: 'metrics-influxdb', version: '0.8.2'

    compile group: 'com.carrotsearch', name: 'java-sizeof', version: '0.0.5'

//    compile 'org.aspectj:aspectjrt:1.9.22'
//    compile 'org.aspectj:aspectjweaver:1.9.22'
//    compile 'org.aspectj:aspectjtools:1.9.22'
//    compile 'com.googlecode.cqengine:cqengine:3.6.0'
//    compile group: 'com.google.api.grpc', name: 'googleapis-common-protos', version: '0.0.3'

    // http
    compile 'org.eclipse.jetty:jetty-server:9.4.53.v20231009'
    compile 'org.eclipse.jetty:jetty-servlet:9.4.11.v20180605'
    compile 'com.alibaba:fastjson:1.2.83'
    compile group: 'org.apache.httpcomponents', name: 'httpasyncclient', version: '4.1.5'
    // end http

    // https://mvnrepository.com/artifact/com.github.briandilley.jsonrpc4j/jsonrpc4j
//    compile group: 'com.github.briandilley.jsonrpc4j', name: 'jsonrpc4j', version: '1.6'

    // https://mvnrepository.com/artifact/javax.portlet/portlet-api
    compileOnly group: 'javax.portlet', name: 'portlet-api', version: '3.0.1'

    compile "io.vavr:vavr:0.9.2"
    compile group: 'org.pf4j', name: 'pf4j', version: '3.10.0'

    compile group: 'org.zeromq', name: 'jeromq', version: '0.6.0'
    compile 'io.github.tronprotocol:zksnark-java-sdk:1.0.0'
    compile project(":protocol")


//    compile group: 'org.iq80.leveldb', name: 'leveldb', version: '0.12'
    compile group: leveldbGroup, name: leveldbName, version: leveldbVersion
    implementation 'io.grpc:grpc-netty-shaded:1.63.0'
    implementation 'io.grpc:grpc-netty:1.63.0'
    implementation 'io.grpc:grpc-protobuf:1.63.0'
    implementation 'io.grpc:grpc-stub:1.63.0'
    implementation 'com.google.guava:guava:32.0-jre'
    implementation fileTree(dir: 'libs', include: '*.jar')
}

check.dependsOn 'lint'

checkstyle {
    toolVersion = "${versions.checkstyle}"
    configFile = file("config/checkstyle/checkStyleAll.xml")
}


checkstyleMain {
    source = 'src/main/java'
}

task lint(type: Checkstyle) {
    // Cleaning the old log because of the creation of the new ones (not sure if totaly needed)
    delete fileTree(dir: "${project.rootDir}/app/build/reports")
    source 'src'
    include '**/*.java'
    exclude 'main/gen/**'
    exclude 'test/**'
    // empty classpath
    classpath = files()
    //Failing the build
    ignoreFailures = false
}

test {
    testLogging {
        exceptionFormat = 'full'
    }
    jacoco {
        destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
        classDumpDir = file("$buildDir/jacoco/classpathdumps")
    }
}

task stest(type: Test) {
    doFirst{
        useTestNG {
            suites(file('src/test/resources/testng.xml'))
            parallel 'tests'
            threadCount 4

        }

        testLogging {
            exceptionFormat = 'full'
            showStackTraces = "true"
        }

        jacoco {
            destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
            classDumpDir = file("$buildDir/jacoco/classpathdumps")
        }
    }
}



task replaceConfig(type: Test){
    doFirst{
        String path = "testcase/src/test/resources/testng.conf";
        File file = new File(path);
        println "find config path to change:"
        logger.info("find config path to change:" + file.getAbsolutePath());
        FileReader fin = new FileReader(file);
        BufferedReader bufIn = new BufferedReader(fin);
        CharArrayWriter tempStream = new CharArrayWriter();
        String line = null;
        while ((line = bufIn.readLine()) != null) {
            line = line.replaceAll("maxFeeLimit = 1000000000", "maxFeeLimit = 1500000000");
            tempStream.write(line);
            tempStream.append(System.getProperty("line.separator"));
        }
        bufIn.close();
        FileWriter out = new FileWriter(file);
        tempStream.writeTo(out);
        out.close();
    }

}

task dailyBuild(type: Test, dependsOn: replaceConfig ) {
    doFirst{
        maxHeapSize = "3072m"
        useTestNG {
            suites(file('src/test/resources/daily-build.xml'))
            parallel 'tests'
            threadCount 2
        }
    }

}

task trident(type: Test) {
    doFirst {
        useTestNG {
            suites(file('src/test/resources/trident.xml'))
        }
    }
}


task leveldbTest(type: Test) {
    doFirst{
        useTestNG {
            suites(file('src/test/resources/leveldb.xml'))
            parallel 'tests'
            threadCount 1
        }
    }
}



task mainnetReplayQuery(type: Test) {
    doFirst{
        useTestNG {
            suites(file('src/test/resources/mainnet-replay-query.xml'))
            parallel 'tests'
            threadCount 1
        }
    }
}


jacocoTestReport {
    reports {
        xml.enabled true
        csv.enabled false
        html.destination file("${buildDir}/jacocoHtml")
    }
    executionData.from = 'build/jacoco/jacocoTest.exec'
}

configurations.archives.artifacts.removeAll { it.type == 'tar' }
applicationName = 'java-tron'
startScripts.enabled = false
run.enabled = false
tasks.distTar.enabled = false

